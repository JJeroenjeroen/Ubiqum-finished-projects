#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
y_df_test <- data.frame(y_list_test)
all_y_values <- left_join(y_df_test, predictions, by = "ID")
confusionMatrix(data = as.factor(all_y_values$knn_predict_BUILDINGID), as.factor(all_y_values$BUILDINGID))
predictions <- readRDS("2019-03-15 predicted values3")
#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
y_df_test <- data.frame(y_list_test)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
all_y_values <- left_join(y_df_test, predictions, by = "ID")
confusionMatrix(data = as.factor(all_y_values$knn_predict_BUILDINGID), as.factor(all_y_values$BUILDINGID))
predictions <- readRDS("2019-03-06 predicted values")
#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
y_df_test <- data.frame(y_list_test)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
all_y_values <- left_join(y_df_test, predictions, by = "ID")
confusionMatrix(data = as.factor(all_y_values$knn_predict_BUILDINGID), as.factor(all_y_values$BUILDINGID))
confusionMatrix(data = as.factor(all_y_values$rf_predict_BUILDINGID), as.factor(all_y_values$BUILDINGID))
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles/Results/total")
#read results into R
Building0_floor <- readRDS("2019-03-18 BUilding 0 total")
Building1_floor <- readRDS("2019-03-18 BUilding 1 total")
Building2_floor <- readRDS("2019-03-18 BUilding 2 total")
Building0_location <- readRDS("2019-03-19 BUilding 0 location")
Building1_location <- readRDS("2019-03-19 BUilding 1 location")
Building2_location <- readRDS("2019-03-19 BUilding 2 location")
#combine predictions
all_y_values <- bind_rows(Building0_floor, Building1_floor, Building2_floor)
all_y_values_location <- bind_rows(Building0_location, Building1_location, Building2_location)
all_y_values$LATITUDE <- all_y_values_location$LATITUDE
all_y_values$knn_predict_LATITUDE <- all_y_values_location$knn_predict_LATITUDE
all_y_values$LONGITUDE <- all_y_values_location$LONGITUDE
all_y_values$knn_predict_LONGITUDE <- all_y_values_location$knn_predict_LONGITUDE
all_y_values$knn_predict_FLOOR <- as.factor(all_y_values$knn_predict_FLOOR)
all_y_values$FLOOR <- as.factor(all_y_values$FLOOR)
#Confusion matrices of the floors and buildings
confusionMatrix(data = all_y_values$knn_predict_FLOOR, all_y_values$FLOOR)
all_y_values$Longerror <- all_y_values$knn_predict_LONGITUDE - all_y_values$LONGITUDE
all_y_values$Laterror <- all_y_values$knn_predict_LATITUDE - all_y_values$LATITUDE
all_y_values$Longerror <- all_y_values$Longerror^2
all_y_values$Laterror <- all_y_values$Laterror^2
all_y_values$dist <- all_y_values$Laterror + all_y_values$Longerror
mean(sqrt(all_y_values$dist))
postResample(all_y_values$knn_predict_LATITUDE, all_y_values$LATITUDE)
postResample(all_y_values$knn_predict_LONGITUDE, all_y_values$LONGITUDE)
4.6301153^2 + 4.9233015^2
sqrt(45.67687)
(sqrt(all_y_values$dist))
mean(sqrt(all_y_values$dist))
histogram(all_y_values$dist)
histogram(sqrt(all_y_values$dist))
ggplot(all_y_values) +
geom_bar(sqrt(dist))
dist
ggplot(all_y_values) +
geom_bar(sqrt(all_y_values$dist))
ggplot(all_y_values) +
geom_bar(aes(x = sqrt(all_y_values$dist)))
all_y_values$dist <- (sqrt(all_y_values$dist))
ggplot(all_y_values) +
geom_bar(aes(x = dist))
ggplot(all_y_values) +
geom_histogram(aes(x = dist))
ggplot(all_y_values) +
geom_density(aes(x = dist))
ggplot(all_y_values) +
geom_histogram(aes(x = dist))
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 60)
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 120)
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 240)
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 240) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 120) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
geom_density(aes(x = dist))
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
geom_density(aes(x = dist)) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
geom_density(aes(x = dist*100)) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
geom_density(aes(x = dist)) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
bbc_style()
mean(all_y_values)
mean(all_y_values$dist)
ggplot(all_y_values) +
geom_density(aes(x = dist), bins = 90) +
bbc_style()
ggplot(all_y_values) +
geom_density(aes(x = dist)) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90) +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = dist), bins = 90, colour = "black", fill = "lightblue") +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = LONGITUDE), bins = 90, colour = "black", fill = "lightblue") +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = Longerror), bins = 90, colour = "black", fill = "lightblue") +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = Laterror), bins = 90, colour = "black", fill = "lightblue") +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = sqrt(Longerror)), bins = 90, colour = "black", fill = "lightblue") +
bbc_style()
ggplot(all_y_values) +
geom_histogram(aes(x = sqrt(Laterror)), bins = 90, colour = "black", fill = "lightblue") +
bbc_style()
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/1) Data setup.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#which algorithms should be used?
algorithms <- c("svmLinear")
#which algorithms should be used?
algorithms <- c("knn")
#create an empty list that will contain the Â¨predictions of the loop
all_predicted_values <- list()
#this for-loop will specify which algorithm the caret package will use
for (method in algorithms){
#set training parameters
train_method = method
#the following for-loop will loop all datasets x & y's and make a trained  model for them
for (i in 1:length(y_names)){
set.seed(124)
#create a throwaway var of the trained values that will be used in this loop to predict the dependent variables
throwaway_fit <- train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl)
#create a throwaway predict that can be used in this loop and removed afterwards
throwaway_predict <- predict(throwaway_fit,
newdata = x_list_test[[y_names[i]]])
#provide statistics of applied model on the testing set
assign(paste(method,
"_outcome_",
y_names[i],
sep = ""),
postResample(throwaway_predict
, y_list_test[[y_names[i]]]))
#name for the predicted values because it doesnt work if you add the function itself
throwaway_df <- data.frame(throwaway_predict)
colnames(throwaway_df) <- paste(method,
"_predict_",
y_names[i],
sep = "")
#store predictions of all loops in a list
all_predicted_values <- list.append(all_predicted_values,
throwaway_df)
#remove throwaway parts of loop
remove(throwaway_fit)
remove(throwaway_predict)
remove(throwaway_df)
}
}
#store all predicted values in an RDS file
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles/Results")
saveRDS(all_predicted_values,
file = paste(Sys.Date(), "predicted values3"))
#This file will give the results and plot the predictions to see where the errors occur
#For more information, visit http://archive.ics.uci.edu/ml/datasets/UJIIndoorLoc
#########################################################################################
#set working directory to get the resultss
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles/Results")
predictions <- readRDS("2019-03-21 predicted values3")
#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
y_df_test <- data.frame(y_list_test)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
all_y_values <- left_join(y_df_test, predictions, by = "ID")
#Confusion matrices of the floors and buildings
confusionMatrix(data = all_y_values$knn_predict_FLOOR, all_y_values$FLOOR)
confusionMatrix(data = all_y_values$svmLinear_predict_BUILDING, all_y_values$BUILDING)
confusionMatrix(data = all_y_values$knn_predict_BUILDING, all_y_values$BUILDING)
ggplot(all_y_values)+
histogram(all_y_values$longerr)
#This file will give the results and plot the predictions to see where the errors occur
#For more information, visit http://archive.ics.uci.edu/ml/datasets/UJIIndoorLoc
#########################################################################################
#set working directory to get the resultss
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles/Results")
predictions <- readRDS("2019-03-21 predicted values3")
#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
y_df_test <- data.frame(y_list_test)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
all_y_values <- left_join(y_df_test, predictions, by = "ID")
#Confusion matrices of the floors and buildings
confusionMatrix(data = all_y_values$knn_predict_BUILDING, all_y_values$BUILDING)
confusionMatrix(data = all_y_values$knn_predict_FLOOR, all_y_values$FLOOR)
#metrics for longitude and latitude
postResample(all_y_values$knn_predict_LATITUDE, all_y_values$LATITUDE)
#histogram of longitude & latitude errors
ggplot(all_y_values) +
histogram(all_y_values$longerr)
#Genereate the model's errors for building
all_y_values$errorBUILD <- as.numeric(all_y_values$BUILDINGID) - as.numeric(all_y_values$knn_predict_BUILDINGID)
#plot Correct building vs wrong building
ggplot(all_y_values) +
geom_point((aes(x = LONGITUDE, y = LATITUDE, colour = errorBUILD)))
#plot Correct building vs wrong building
ggplot(all_y_values) +
geom_point((aes(x = LONGITUDE, y = LATITUDE, colour = as.factor(errorBUILD))))
#Genereate the model's errors for Longitude & Latitude
all_y_values$longerr <- all_y_values$knn_predict_LATITUDE - all_y_values$LATITUDE
all_y_values$laterr <- all_y_values$knn_predict_LONGITUDE - all_y_values$LONGITUDE
#histogram of longitude & latitude errors
ggplot(all_y_values) +
histogram(all_y_values$longerr)
all_y_values$longerr
#histogram of longitude & latitude errors
ggplot(all_y_values) +
histogram(longerr)
#histogram of longitude & latitude errors
ggplot(all_y_values) +
geom_histogram(longerr)
#histogram of longitude & latitude errors
ggplot(all_y_values) +
geom_histogram(aes(x = longerr))
#histogram of longitude & latitude errors
ggplot(all_y_values) +
geom_histogram(aes(x = longerr), colour = "black", fill = "lightblue")
ggplot(all_y_values) +
geom_histogram(aes(x = laterr), colour = "black", fill = "lightblue")
#histogram of longitude & latitude errors
ggplot(all_y_values) +
geom_histogram(aes(x = longerr), colour = "black", fill = "lightblue") +
geom_histogram(aes(x = laterr), colour = "black", fill = "lightblue")
#histogram of longitude & latitude errors
ggplot(all_y_values) +
geom_histogram(aes(x = longerr), colour = "black", fill = "lightblue")
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/1) Data setup.R', echo=TRUE)
#remove the dataframes that wont be used anymore
remove(train_set_yvars, train_set_wapcolumns, B1_floor_rest_train, B1_floor0_train, B1_floor1_train, long_lat_train, test_set_wapcolumns, test_set_yvars)
#remove the dataframes that wont be used anymore
remove(train_set_yvars, train_set_wapcolumns, B1_floor_rest_train, B1_floor0_train, B1_floor1_train, long_lat_train, test_set_wapcolumns, test_set_yvars)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/1) Data setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/1) Data setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/1) Data setup.R', echo=TRUE)
#set cross validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats)
#which algorithms should be used?
algorithms <- c("knn")
#create an empty list that will contain the Â¨predictions of the loop
all_predicted_values <- list()
#this for-loop will specify which algorithm the caret package will use
for (method in algorithms){
#set training parameters
train_method = method
#the following for-loop will loop all datasets x & y's and make a trained  model for them
for (i in 1:length(y_names)){
set.seed(124)
#create a throwaway var of the trained values that will be used in this loop to predict the dependent variables
throwaway_fit <- train(x = x_list_train[[y_names[i]]],
y = y_list_train[[y_names[i]]],
method = train_method,
trControl = fitControl)
#create a throwaway predict that can be used in this loop and removed afterwards
throwaway_predict <- predict(throwaway_fit,
newdata = x_list_test[[y_names[i]]])
#provide statistics of applied model on the testing set
assign(paste(method,
"_outcome_",
y_names[i],
sep = ""),
postResample(throwaway_predict
, y_list_test[[y_names[i]]]))
#name for the predicted values because it doesnt work if you add the function itself
throwaway_df <- data.frame(throwaway_predict)
colnames(throwaway_df) <- paste(method,
"_predict_",
y_names[i],
sep = "")
#store predictions of all loops in a list
all_predicted_values <- list.append(all_predicted_values,
throwaway_df)
#remove throwaway parts of loop
remove(throwaway_fit)
remove(throwaway_predict)
remove(throwaway_df)
}
}
#store all predicted values in an RDS file
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles/Results")
saveRDS(all_predicted_values,
file = paste(Sys.Date(), "predicted values3"))
#This file will give the results and plot the predictions to see where the errors occur
#For more information, visit http://archive.ics.uci.edu/ml/datasets/UJIIndoorLoc
#########################################################################################
#set working directory to get the resultss
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles/Results")
predictions <- readRDS("2019-03-21 predicted values3")
#add all actual y values in 1 dataframe with the results
predictions <- data.frame(predictions)
y_df_test <- data.frame(y_list_test)
predictions$ID <- seq.int(nrow(predictions))
y_df_test$ID <- seq.int(nrow(y_df_test))
all_y_values <- left_join(y_df_test, predictions, by = "ID")
#Confusion matrix of the buildings
confusionMatrix(data = all_y_values$knn_predict_BUILDING, all_y_values$BUILDING)
#metrics for longitude and latitude
postResample(all_y_values$knn_predict_LATITUDE, all_y_values$LATITUDE)
postResample(all_y_values$knn_predict_LONGITUDE, all_y_values$LONGITUDE)
#Genereate the model's errors for building
all_y_values$errorBUILD <- as.numeric(all_y_values$BUILDINGID) - as.numeric(all_y_values$knn_predict_BUILDINGID)
#plot Correct building vs wrong building
ggplot(all_y_values) +
geom_point((aes(x = LONGITUDE, y = LATITUDE, colour = as.factor(errorBUILD))))
#Genereate the model's errors for Longitude & Latitude
all_y_values$longerr <- all_y_values$knn_predict_LATITUDE - all_y_values$LATITUDE
all_y_values$laterr <- all_y_values$knn_predict_LONGITUDE - all_y_values$LONGITUDE
#histogram of longitude & latitude errors
ggplot(all_y_values) +
geom_histogram(aes(x = longerr), colour = "black", fill = "lightblue")
ggplot(all_y_values) +
geom_histogram(aes(x = laterr), colour = "black", fill = "lightblue")
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/1) Data setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Full set analysis/2) Caret applied.R', echo=TRUE)
#setup libraries
rm(list = ls())
set.seed(124)
library(ggplot2)
library(readr)
library(anytime)
library(caret)
library(dplyr)
library(tidyr)
library(bbplot)
#import data
setwd("C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Excel datafiles")
wifi_train <- read.csv("trainingData.csv", header=TRUE, row.names=NULL, sep = ",")
wifi_test <- read.csv("validationData.csv", header=TRUE, row.names=NULL, sep = ",")
#add variables that name the data for later plot
wifi_train$train <- "train"
wifi_test$train <- "test"
#make the dataset 1 set
wifi_train <- bind_rows(wifi_train, wifi_test)
#plot latitutde and longitude, colour
ggplot(wifi_train) +
geom_hline(yintercept = 4864900, colour = "white") +
geom_point(aes(x = LONGITUDE, y = LATITUDE, colour = BUILDINGID)) +
bbc_style() +
theme(legend.position = "none",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 0, size = 17),
axis.text.y = element_text(hjust = 1, angle = 90, size = 17)) +
labs(title="Latitude and Longitude for each observation",
subtitle = "An example of how positions in the buildings look like as datapoints") +
scale_x_continuous(breaks = c(-7500),
labels = c("Longitude")) +
scale_y_continuous(breaks = c(4864900),
labels = c("Latitude"))
#plot latitutde and longitude, colour
ggplot(wifi_train) +
geom_hline(yintercept = 4864900, colour = "white") +
geom_point(aes(x = LONGITUDE, y = LATITUDE, colour = train)) +
bbc_style() +
theme(legend.position = "none",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 0, size = 17),
axis.text.y = element_text(hjust = 1, angle = 90, size = 17)) +
labs(title="Latitude and Longitude for each observation",
subtitle = "An example of how positions in the buildings look like as datapoints") +
scale_x_continuous(breaks = c(-7500),
labels = c("Longitude")) +
scale_y_continuous(breaks = c(4864900),
labels = c("Latitude"))
#plot latitude and longitude, color train and test values differently
ggplot(wifi_train) +
geom_hline(yintercept = 4864900, colour = "white") +
geom_point(aes(x = LONGITUDE, y = LATITUDE, colour = train)) +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 0, size = 17),
axis.text.y = element_text(hjust = 1, angle = 90, size = 17)) +
labs(title="Latitude and Longitude for each observation",
subtitle = "An example of how positions in the buildings look like as datapoints") +
scale_x_continuous(breaks = c(-7500),
labels = c("Longitude")) +
scale_y_continuous(breaks = c(4864900),
labels = c("Latitude"))
#plot latitude and longitude, color train and test values differently
ggplot(wifi_train) +
geom_hline(yintercept = 4864900, colour = "white") +
geom_point(aes(x = LONGITUDE, y = LATITUDE, colour = train)) +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 0, size = 17),
axis.text.y = element_text(hjust = 1, angle = 90, size = 17)) +
labs(title="Latitude and Longitude for each observation",
subtitle = "An example of how train and test positions are situated") +
scale_x_continuous(breaks = c(-7500),
labels = c("Longitude")) +
scale_y_continuous(breaks = c(4864900),
labels = c("Latitude"))
#plot latitude and longitude, color train and test values differently
ggplot(wifi_train) +
geom_hline(yintercept = 4864900, colour = "white") +
geom_point(aes(x = LONGITUDE, y = LATITUDE, colour = train)) +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 0, size = 17),
axis.text.y = element_text(hjust = 1, angle = 90, size = 17)) +
labs(title="Latitude and Longitude for each observation",
subtitle = "An overview of how train and test positions are situated") +
scale_x_continuous(breaks = c(-7500),
labels = c("Longitude")) +
scale_y_continuous(breaks = c(4864900),
labels = c("Latitude"))
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Exploratory files/1) Exploring the data.R', echo=TRUE)
#plot latitude and longitude, color train and test values differently
ggplot(wifi_train) +
geom_hline(yintercept = 4864900, colour = "white") +
geom_point(aes(x = LONGITUDE, y = LATITUDE, colour = train)) +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 0, size = 17),
axis.text.y = element_text(hjust = 1, angle = 90, size = 17)) +
labs(title="Latitude and Longitude for each observation",
subtitle = "An overview of how train and test positions are situated") +
scale_x_continuous(breaks = c(-7500),
labels = c("Longitude")) +
scale_y_continuous(breaks = c(4864900),
labels = c("Latitude"))
#plot the distribution of WAP values
ggplot(train_set_long_connected) +
geom_density(aes(x = dBm), size = 0.8, colour = "black") +
geom_hline(yintercept = 0.045, colour = "white") +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 25, size = 17)) +
labs(title="dBm distibution in the dataset",
subtitle = "All three buildings combined. Observations with no signal were removed")+
scale_x_continuous(breaks = c(-100, -75, -50, -25, 0),
labels = c("-100", "-75", "-50", "-25", "dBm")) +
scale_y_continuous(breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.045),
labels = c("0", "0.01", "0.02", "0.03", "0.04", "Probability"))
#plot the distribution of WPA values
ggplot(train_set_long_connected) +
geom_point(aes(x = LATITUDE, y = LONGITUDE), size = 0.8, colour = "black") +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 25, size = 17)) +
labs(title="Geometrical positions of the data")
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Exploratory files/1) Exploring the data.R', echo=TRUE)
#plot the distribution of WPA values
ggplot(train_set_long_connected) +
geom_point(aes(x = LATITUDE, y = LONGITUDE), size = 0.8, colour = "black") +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 25, size = 17)) +
labs(title="Geometrical positions of the data")
#plot the distribution of WAP values
ggplot(train_set_long_connected) +
geom_density(aes(x = dBm), size = 0.8, colour = "black") +
geom_hline(yintercept = 0.045, colour = "white") +
bbc_style() +
theme(legend.position = "right",
plot.subtitle=element_text(face="italic", color="deepskyblue4", size = 20),
axis.text.x = element_text(hjust = 1, angle = 25, size = 17)) +
labs(title="dBm distibution in the dataset",
subtitle = "All three buildings combined. Observations with no signal were removed")+
scale_x_continuous(breaks = c(-100, -75, -50, -25, 0),
labels = c("-100", "-75", "-50", "-25", "dBm")) +
scale_y_continuous(breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.045),
labels = c("0", "0.01", "0.02", "0.03", "0.04", "Probability"))
source('C:/Users/Jeroen/Desktop/Ubiqum/IoT Analytics/Task 3 - Techniques for Wifi Locationing/Code/Exploratory files/1) Exploring the data.R', echo=TRUE)
