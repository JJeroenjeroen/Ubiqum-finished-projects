bind_cols(iphone_xvars, iphone_sentiment)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
iphone_sentiment
iphone_matrix
#build model
rpart_model <- rpart(iphonesentiment~.,data = iphone_matrix, method="class")
#plot tree
plot(rpart_model);text(rpart_model)
rpart_model
text(rpart_model)
text(rpart_model)
plot(rpart_model)
text(rpart_model)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
varImp(rpart_model)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   final                                  #
#####################################################
rm(list = ls())
set.seed(124)
#libraries
library(doParallel)
library(readr)
library(plotly)
library(caret)
library(rpart)
library(rpart.plot)
# Create Cluster with desired number of cores.
cl <- makeCluster(2)
#set working directory
setwd("C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Excel files")
# Register Cluster
registerDoParallel(cl)
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
#split the matrix in a df for the y variable and for the x variables
iphone_sentiment <- iphone_matrix[ncol(iphone_matrix)]
iphone_xvars <- iphone_matrix[-ncol(iphone_matrix)]
#normalize rows
iphone_xvars <- scale(t(iphone_xvars))
iphone_xvars <- as.data.frame(t(iphone_xvars))
iphone_matrix <- bind_cols(iphone_xvars, iphone_sentiment)
#build model
rpart_model <- rpart(iphonesentiment~.,data = iphone_matrix, method="class")
plot(rpart_model);text(rpart_model)
varImp(rpart_model)
iphone_xvars <- iphone_xvars[c("sonyxperia",	"samsungperneg",	"samsunggalaxy",
"samsungdisneg",	"samsungcampos",	"iphonedisunc",
"iphonedispos",	"iphonedisneg",	"iphonecamunc",
"iphonecampos",	"iphonecamneg",	"iphone",	"ios",
"htcphone",	"htcdispos",	"htccampos",	"googleperpos",
"googleandroid",	"sonyperpos",	"sonydispos",
"nokialumina",	"iphoneperunc",	"iphoneperpos",
"iphoneperneg",	"htccamneg")]
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
iphone_train <- iphone_matrix[train_partition,]
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   final                                  #
#####################################################
rm(list = ls())
set.seed(124)
#libraries
library(doParallel)
library(readr)
library(plotly)
library(caret)
library(rpart)
library(rpart.plot)
# Create Cluster with desired number of cores.
cl <- makeCluster(2)
# Register Cluster
registerDoParallel(cl)
#set working directory
setwd("C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Excel files")
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
iphone_train <- iphone_matrix[train_partition,]
iphone_train
iphone_test <- iphone_matrix[!train_partition,]
iphone_test <- iphone_matrix[-train_partition,]
#split the matrix in a df for the y variable and for the x variables
iphone_sentiment <- iphone_matrix[ncol(iphone_matrix)]
iphone_xvars <- iphone_matrix[-ncol(iphone_matrix)]
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
control_search <- "grid"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(10:50))
#train Random Forest Regression model
set.seed(123)
C50Fit1 <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
control_search <- "grid"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(10:50))
#train Random Forest Regression model
set.seed(123)
C50Fit1 <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
print(C50Fit1)
plot(C50Fit1)
C50Fit1
#See the most important predictors
varImp(C50Fit1)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/2) Caret.R', echo=TRUE)
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
#create trainset
iphone_train <- iphone_matrix[train_partition,]
#create testset
iphone_test <- iphone_matrix[-train_partition,]
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_search <- "grid"
control_repeats <- 1
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(10:50))
#train Random Forest Regression model
set.seed(123)
C50Fit <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
rm(list = ls())
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
#create trainset
iphone_train <- iphone_matrix[train_partition,]
#create testset
iphone_test <- iphone_matrix[-train_partition,]
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
control_search <- "grid"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(10:50))
#train Random Forest Regression model
set.seed(123)
C50Fit1 <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
#See the most important predictors
varImp(C50Fit1)
C50Fit1
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R')
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
#create trainset
iphone_train <- iphone_matrix[train_partition,]
#create testset
iphone_test <- iphone_matrix[-train_partition,]
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
control_search <- "grid"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(10:50))
#train Random Forest Regression model
set.seed(123)
train_tuneGrid <- expand.grid(.mtry=c(1:10))
#train Random Forest Regression model
set.seed(123)
C50Fit1 <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
#create trainset
iphone_train <- iphone_matrix[train_partition,]
#create testset
iphone_test <- iphone_matrix[-train_partition,]
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
control_search <- "grid"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(2:20))
#train Random Forest Regression model
set.seed(123)
C50Fit1 <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
table(is.na(iphone_matrix))
#bind rows back together
iphone_matrix <- bind_cols(iphone_xvars, iphone_sentiment)
table(is.na(iphone_matrix))
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
nzv <- nearZeroVar(iphone_matrix)
iphone_matrix <- iphone_matrix[,-nzv]
#split the matrix in a df for the y variable and for the x variables
iphone_sentiment <- iphone_matrix[ncol(iphone_matrix)]
iphone_xvars <- iphone_matrix[-ncol(iphone_matrix)]
#bind rows back together
iphone_matrix <- bind_cols(iphone_xvars, iphone_sentiment)
table(is.na(iphone_matrix))
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
iphone_matrix
table(is.na(iphone_matrix))
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
nzv <- nearZeroVar(iphone_matrix)
iphone_matrix <- iphone_matrix[,-nzv]
iphone_matrix <- iphone_matrix[-which(apply(iphone_matrix, 1, var) == 0)]
iphone_matrix[-which(apply(iphone_matrix, 1, var) == 0)]
iphone_matrix[which(apply(iphone_matrix, 1, var) == 0)]
iphone_matrix[which(apply(iphone_matrix, 1, var) == 0), ]
iphone_matrix <- iphone_matrix[-which(apply(iphone_matrix, 1, var) == 0), ]
#set working directory
setwd("C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Excel files")
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
rm(list = ls())
set.seed(124)
#libraries
library(doParallel)
library(readr)
library(plotly)
library(caret)
library(rpart)
# Create Cluster with desired number of cores.
cl <- makeCluster(1)
library(rpart.plot)
# Register Cluster
registerDoParallel(cl)
#set working directory
setwd("C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Excel files")
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
nzv <- nearZeroVar(iphone_matrix)
iphone_matrix <- iphone_matrix[,-nzv]
iphone_matrix <- iphone_matrix[-which(apply(iphone_matrix, 1, var) == 0), ]
#split the matrix in a df for the y variable and for the x variables
iphone_sentiment <- iphone_matrix[ncol(iphone_matrix)]
iphone_xvars <- iphone_matrix[-ncol(iphone_matrix)]
#normalize rows
iphone_xvars <- as.data.frame(scale(t(iphone_xvars)))
iphone_xvars <- as.data.frame(t(iphone_xvars))
#bind rows back together
iphone_matrix <- bind_cols(iphone_xvars, iphone_sentiment)
table(is.na(iphone_matrix))
#make the sentiment a factor variable
iphone_matrix$iphonesentiment <- as.factor(iphone_matrix$iphonesentiment)
table(is.na(iphone_matrix))
View(iphone_matrix)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
table(is.na(iphone_matrix))
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R')
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R')
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
#create trainset
iphone_train <- iphone_matrix[train_partition,]
#create testset
iphone_test <- iphone_matrix[-train_partition,]
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
iphone_matrix$iphonesentiment
iphone_matrix[complete.cases(iphone_matrix)]
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
rm(list = ls())
set.seed(124)
#libraries
library(doParallel)
library(plotly)
library(caret)
library(rpart)
# Register Cluster
registerDoParallel(cl)
#set working directory
setwd("C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Excel files")
#add dataframe for iphone modelling/predictions
iphone_matrix <- read.csv("iphone_smallmatrix_labeled_8d.csv")
# Create Cluster with desired number of cores.
cl <- makeCluster(1)
nzv <- nearZeroVar(iphone_matrix)
library(readr)
library(rpart.plot)
iphone_matrix <- iphone_matrix[,-nzv]
#split the matrix in a df for the y variable and for the x variables
iphone_sentiment <- iphone_matrix[ncol(iphone_matrix)]
iphone_xvars <- iphone_matrix[-ncol(iphone_matrix)]
#normalize rows
iphone_xvars <- as.data.frame(scale(t(iphone_xvars)))
iphone_xvars <- as.data.frame(t(iphone_xvars))
#bind rows back together
iphone_matrix <- bind_cols(iphone_xvars, iphone_sentiment)
iphone_matrix[complete.cases(iphone_matrix), ]
iphone_matrix <- iphone_matrix[complete.cases(iphone_matrix), ]
#make the sentiment a factor variable
iphone_matrix$iphonesentiment <- as.factor(iphone_matrix$iphonesentiment)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R')
#####################################################
# Date:      25-03-2019                             #
# Author:    Jeroen Meij                            #
# File:      Customer Sentiment Analysis            #
# Version:   1.0                                    #
#####################################################
#make a data partition
#how big should the data partition be?
no_rows_partition <- 1000
#create the data partition of the full trainingset
train_partition <- createDataPartition(y = iphone_matrix[,"iphonesentiment"],
p = (no_rows_partition/nrow(iphone_matrix)),
list = FALSE)
#create trainset
iphone_train <- iphone_matrix[train_partition,]
#create testset
iphone_test <- iphone_matrix[-train_partition,]
#set coss validation parameters
control_method <-"repeatedcv"
control_folds <- 10
control_repeats <- 1
control_search <- "grid"
fitControl <- trainControl(method = control_method,
number = control_folds,
repeats = control_repeats,
search = control_search)
#set training parameters
train_method <- "C5.0"
train_metric <- "Accuracy"
train_tuneLength <- 10
train_tuneGrid <- expand.grid(.mtry=c(2:20))
#train Random Forest Regression model
set.seed(123)
C50Fit1 <- train(iphonesentiment ~ .,
data = iphone_train,
method = train_method,
metric = train_metric,
tuneLength = train_tuneLength,
trControl = fitControl)
#See the most important predictors
varImp(C50Fit1)
C50Fit1
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R', echo=TRUE)
source('C:/Users/Jeroen/Desktop/Ubiqum/Big Data/Code/1) Setup.R')
